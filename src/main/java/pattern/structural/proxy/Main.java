package pattern.structural.proxy;

/**
 * При проектировании сложных систем, достаточно часто возникает необходимость обеспечить контролируемый доступ
 * к определенным объектам системы. Мотивацией для этого служит ряд приобретаемых преимуществ.
 * Таких как, ленивая инициализация по требованию для «громоздких» объектов, подсчет количества ссылок на объект
 * и т.д. и т.п. Однако, не всегда потребность в контролируемом доступе к объекту базируется только на преимуществах.
 * Как правило, сложность процессов реального мира, ограничения вычислительных ресурсов просто не оставляют
 * проектировщику выбора, нежели как воспользоваться паттерном «Заместитель» («Сурогат»).
 *
 * Идея паттерна «Заместитель» заключается в предоставлении клиенту другого объекта (заместителя),
 * взамен объекту с контролируемым доступом. При этом, объект-заместитель, реализует тот-же интерфейс,
 * что и оригинальный объект, в результате чего, поведение клиента не требует изменений. Иными словами,
 * клиент взаимодействует с заместителем ровно как с оригинальным объектом посредством единого интерфейса.
 * Клиент, так же, не делает предположений о том работает ли он с реальным объектом или его заместителем.
 * Контролирование доступа к объекту, при этом, достигается за счет использования ссылки на него в заместителе,
 * благодаря которой заместитель переадресовывает внешние вызовы контролируемому объекту,
 * возможно сопровождая их дополнительными операциями.
 *
 * Такой подход позволяет неявным для клиента образом контролировать доступ к объекту.
 */
public class Main {

    public static void main(String[] args) {
        long start = System.currentTimeMillis();
        final OriginalClass originalClass = new ProxyClass("Andrei");
        final String name = originalClass.getName();
        long afterGetName = System.currentTimeMillis();
        originalClass.voice();
        long end = System.currentTimeMillis();


        System.out.println("afterGetName - start: " + (afterGetName - start));
        System.out.println("end - afterGetName:   " + (end - afterGetName));
        System.out.println("end - start:          " + (end - start));

    }

}
